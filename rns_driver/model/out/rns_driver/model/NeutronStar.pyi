import pandas as pd
from _typeshed import Incomplete
from dataclasses import dataclass

custom_columns: Incomplete
rns_command: str

@dataclass
class NeutronStar:
    eos: str = ...
    rho_c: float = ...
    M: float = ...
    M_0: float = ...
    R: float = ...
    Omega: float = ...
    Omega_p: float = ...
    TW: float = ...
    J: float = ...
    I: float = ...
    Phi_2: float = ...
    h_plus: float = ...
    h_minus: float = ...
    Z_p: float = ...
    Z_b: float = ...
    Z_f: float = ...
    omega_c_over_Omega: float = ...
    r_e: float = ...
    r_ratio: float = ...
    Omega_pa: float = ...
    Omega_plus: float = ...
    u_phi: float = ...
    def __post_init__(self) -> None: ...
    def ComputeAttributes(self) -> None: ...
    def is_valid(self): ...
    def SettingCMD(self): ...
    def __init__(self, eos, rho_c, M, M_0, R, Omega, Omega_p, TW, J, I, Phi_2, h_plus, h_minus, Z_p, Z_b, Z_f, omega_c_over_Omega, r_e, r_ratio, Omega_pa, Omega_plus, u_phi) -> None: ...

class NeutronStarEOSCollection:
    eos: Incomplete
    df: Incomplete
    def __init__(self, eos: str) -> None: ...
    def add_star(self, star: NeutronStar): ...
    def filter_by_mass(self, min_mass: float) -> pd.DataFrame: ...
    def filter_by_central_density(self, min_rho: float = -1.0, max_rho: float = -1.0, last_entry: bool = False) -> pd.DataFrame: ...
    def delete_outside_bounds(self, min_rho: float = -1.0, max_rho: float = -1.0, last_entry: bool = False) -> None: ...
    def get_series(self, rho_TOV, initial_stepsize, options: dict): ...
    def traverse_r_ratio(self, rho_TOV, initial_stepsize_ratio, initial_stepsize_rho_c: float = 10000000000000.0): ...

class NeutronStarEOSCatalog:
    eos_collections: Incomplete
    def __init__(self) -> None: ...
    def add_eos_collection(self, eos_name, eos_collection) -> None: ...
    def get_eos_collection(self, eos_name): ...
    def list_all_eos(self): ...
    def transmute_eos_file_to_200(self, dir_path): ...
